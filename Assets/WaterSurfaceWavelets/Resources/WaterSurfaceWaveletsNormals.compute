#pragma kernel NormalsMainCS

static const float tau = 6.28318530718f;
static const int count = 16;
static const int numNodes = count * 8;
static const int seed = 40234324;

uint2 size;
float period;

Texture3D<float> ampl;
Texture2D<float4> profile;
RWTexture2D<float3> result;

SamplerState samplerInputLinearClamp;
SamplerState samplerInputLinearRepeat;

float amplitude(float3 p)
{
	return ampl.SampleLevel(samplerInputLinearClamp, p, 0.0f);
}

float3 waveNormal(float2 p)
{
	float3 tx = float3(1.0f, 0.0f, 0.0f);
	float3 ty = float3(0.0f, 1.0f, 0.0f);

	float da = 1.0f / numNodes;
	float dx = 16.0f * tau / numNodes;
	for (float a = 0; a < 1.0f; a += da)
	{
		float angle = a * tau;
		float2 kdir;
		sincos(angle, kdir.y, kdir.x);
		float kdir_x = dot(p.xy, kdir) + tau * sin(seed * a);
		float w = 10.0f * kdir_x / period;

		float4 tt = dx * amplitude(float3(p, a)) * profile.SampleLevel(samplerInputLinearRepeat, w, 0.0f);

		tx.xz += kdir.x * tt.zw;
		ty.yz += kdir.y * tt.zw;
	}

	return normalize(cross(tx,ty));
}

[numthreads(1,1,1)]
void NormalsMainCS(uint2 DTid : SV_DispatchThreadID)
{
	float2 s = size;
	float2 p = DTid / s;
	result[DTid] = waveNormal(p) * 0.5f + 0.5f;
}
